//=============================================================================
// フェード処理
// Author : YUUSAN KA
//=============================================================================
#include "main.h"
#include "manager.h"
#include "scene.h"
#include "scene2D.h"
#include "mode.h"
#include "fade.h"
#include "texture.h"

#define FADE_RATE        (0.02f)                          // フェード係数

//*****************************************************************************
//   静的メンバ変数
//*****************************************************************************
CFade::FADE CFade::m_fade = CFade::FADE_NONE;
CMode *CFade::m_pModeNext = NULL;

CFade::CFade():CScene2D(CScene::OBJTYPE_FADE)
{
}

CFade::~CFade()
{
}

//=======================================================================================
//   初期化処理
//=======================================================================================
void CFade::Init(D3DXCOLOR color)
{
	// メンバ変数の初期化
	m_Pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_Scl = D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f);
	m_Color = color;

	// 親の初期化(頂点生成)
	CScene2D::Init();

	// テクスチャセット
	m_pTexture = CTexture::GetTexture((int)CTexture::TEXTYPE_WHITE);

	// タイプの代入
	CScene::SetObjType(CScene::OBJTYPE_FADE);
}

//=======================================================================================
//   終了処理
//=======================================================================================
void CFade::Uninit()
{
	CScene2D::Uninit();
}

//=======================================================================================
//   更新処理
//=======================================================================================
void CFade::Update()
{
	// フェード処理////////////
	if (m_fade == FADE_NONE) {
		return;
	}

	// フェードイン処理
	if (m_fade == FADE_IN) {
		m_Color.a -= FADE_RATE * 5.0f;      // アルファ値を減算して後ろの画面を浮き上がらせる
		if (m_Color.a <= 0.0f) {             // アルファ値が0より少ない時
			m_Color.a = 0.0f;                 // アルファ値を0に設定
			m_fade = FADE_NONE;                   // フェードモードを通常状態にする
			Uninit();
			return;
		}
	}

	// フェードアウト処理
	else if (m_fade == FADE_OUT) {
		m_Color.a += FADE_RATE;               // アルファ値を加算して後ろの画面を沈める
		if (m_Color.a >= 1.0f) {             // アルファ値が1より多い時
			m_Color.a = 1.0f;                 // アルファ値を1に設定
			m_fade = FADE_IN;                     // フェードインモードにする
			CManager::SetMode(m_pModeNext);                // 次のゲームモードを代入
		}
	}

	// アルファ値の代入
	SetVexColor();
}

//=======================================================================================
//   描画処理
//=======================================================================================
void CFade::Draw()
{
	CScene2D::Draw();
}

//=======================================================================================
// 作成処理
//=======================================================================================
CFade *CFade::Create(D3DXCOLOR color)
{
	CFade *pFade;				// 変数宣言
	pFade = new CFade;			// 動的確保
	pFade->Init(color);				// 初期化
	return pFade;				// 値を返す
}

//=======================================================================================
//   描画処理
//=======================================================================================
void CFade::SetFade(CMode *pModeNext, D3DXCOLOR color, FADE fade)
{
	if (m_fade != FADE_NONE) return;
	m_fade = fade;				// フェードモードを代入
	m_pModeNext = pModeNext;		// ゲームモードを代入
	Create(color);					// フェードの生成
}

//=======================================================================================
//  フェードの取得
//=======================================================================================
CFade::FADE CFade::GetFade(void)
{
	return m_fade;
}